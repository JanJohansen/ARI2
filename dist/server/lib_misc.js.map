{"version":3,"sources":["lib_misc.ts"],"names":[],"mappings":";AAAA,+BAAuB,gBACvB,CAAC,CADsC;AACvC,iCAA+B,kBAAkB,CAAC,CAAA;AAElD,4BAAmC,uBAAQ;IAI1C,YAAY,GAAW;QAChB,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAE1D,MAAM,GAAG,CAAC,CAAC;QAEL,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,6BAA6B,CAAC,CAAC;QAE/E,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI;YAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC,CAAC,CAAC;IACJ,CAAC;AACF,CAAC;AAdU,yBAAW,GAAW,kBAAkB,CAAC;AACzC,yBAAW,GAAW,wCAAwC,CAAC;AACvD,kBAAI,GAAG,+BAAc,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;AAHvD,qBAAa,gBAezB,CAAA;AAED,uBAA8B,uBAAQ;IAIlC,YAAY,GAAW;QACnB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;QAEhD,MAAM,GAAG,CAAC,CAAC;QAEL,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,+BAA+B,CAAC,CAAC;QACvE,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,+BAA+B,CAAC,CAAC;QACvE,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE,qBAAqB,CAAC,CAAC;QAErE,EAAE,CAAC,WAAW,CAAE,MAAI,SAAS,EAAE,CAAE,CAAC;QAClC,EAAE,CAAC,WAAW,CAAE,MAAI,SAAS,EAAE,CAAE,CAAC;QAElC;YACI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;QACvC,CAAC;IACR,CAAC;AACF,CAAC;AApBU,oBAAW,GAAW,KAAK,CAAC;AAC/B,oBAAW,GAAW,uBAAuB,CAAC;AACnC,aAAI,GAAG,+BAAc,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AAHlD,gBAAQ,WAqBpB,CAAA","file":"lib_misc.js","sourcesContent":["import {nodeBase} from './nodeExecutor' \r\nimport { loggingService } from './loggingService';\r\n\r\nexport class consoleWriter extends nodeBase {\r\n    static displayName: string = \"Write to console\";\r\n    static description: string = \"Function to write text to the console.\";\r\n    private static _log = loggingService.getLogger(\"consoleWriter\");\r\n\tconstructor(uid: string) {\r\n        consoleWriter._log.trace(\"Creating consoleWriter.\");\r\n        \r\n\t\tsuper(uid);\r\n\r\n        let input = this.createInput(\"Input\", \"string\", \"String to write to console.\");\r\n\t\t\r\n        input.addListener((data)=>{\r\n\t\t\tconsole.log(data);\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport class logicAnd extends nodeBase {\r\n    static displayName: string = \"AND\";\r\n\tstatic description: string = \"Logic 'and' function.\";\r\n    private static _log = loggingService.getLogger(\"logicAnd\");\r\n    constructor(uid: string) {\r\n        logicAnd._log.trace(\"Creating logicAnd.\");\r\n\r\n\t\tsuper(uid);\r\n\t\t\r\n        let iA = this.createInput(\"A\", \"any\", \"Digital input A for function.\");\r\n        let iB = this.createInput(\"B\", \"any\", \"Digital input B for function.\");\r\n        let output = this.createOutput(\"A&B\", \"bool\", \"Output of function.\");\r\n\t\t\r\n        iA.addListener( ()=>calculate() );\r\n        iB.addListener( ()=>calculate() );\r\n\r\n        function calculate(){\r\n            logicAnd._log.trace(\"Calculating output.\");\r\n            output.value = iA.value & iB.value;\r\n        }\r\n\t}\r\n}"],"sourceRoot":"/source/"}