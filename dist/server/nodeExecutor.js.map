{"version":3,"sources":["nodeExecutor.ts"],"names":[],"mappings":"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","file":"nodeExecutor.js","sourcesContent":["import { loggingService } from './loggingService';\r\n\r\nvar log = loggingService.getLogger(\"nodeExecutor\");\r\n\r\nexport default class nodeExecutor {\r\n    functionBlocks: {}[] = []; \r\n\r\n    constructor() {\r\n        log.trace(\"Trace test!\");\r\n        log.info(\"NodeExecutor started...\");\r\n        this.loadFunctionBlocks();\r\n    }\r\n\r\n    loadFunctionBlocks(){\r\n        let lib =  require('./lib_misc');\r\n        //log.info(lib);\r\n        for(var key in lib) {\r\n            let libClass: typeof nodeBase = lib[key];\r\n            log.info(\"--------\");\r\n            log.info(\"Function:\", key);\r\n            log.info(\"Display name:\", libClass.displayName);\r\n            log.info(\"Description:\", libClass.description);\r\n            this.functionBlocks.push({name: key, functionClass: libClass});\r\n        }\r\n    }\r\n\r\n    getFunctions(){\r\n\t    return this.functionBlocks;    \r\n    }\r\n\r\n    static connect(output: nodeIOBase, input: nodeIOBase) {\r\n        output.addListener((data)=>{\r\n            input.value = data;\r\n        })\r\n    }\r\n\r\n    disconnect(output: nodeIOBase, input: nodeIOBase) {\r\n        output.addListener((data)=>{\r\n            input.value = data;\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport class nodeIOBase {\r\n    name: string;\r\n    type: string;\r\n    description: string;\r\n    private _value: any;\r\n\tlisteners: ((any?)=>any)[] = [];\r\n\r\n    constructor(name: string, type: string, description: string) {\r\n        this.name = name;\r\n        this.type = type;\r\n        this.description = description;\r\n    }\r\n\r\n    get value(){\r\n        return this._value;\r\n    }\r\n\r\n    set value(value){\r\n        this._value = value;\r\n        this.listeners.forEach(callback=>{\r\n\t\t\tcallback(value);\r\n\t\t});\r\n    }\r\n\r\n    addListener(callback:(any)=>any) {\r\n\t\tthis.listeners.push(callback);\r\n\t};\r\n\t\r\n\tremoveListener(callback:(any)=>any) {\r\n\t\tthis.listeners.splice(this.listeners.indexOf(callback), 1);\r\n\t};\r\n}\r\n\r\n\r\nexport class nodeBase {\r\n\tstatic displayName: string = \"Anonymous\";\r\n\tstatic description: string = \"\";\r\n    uid: string;\r\n\tinputs: nodeIOBase[] = [];\r\n\toutputs: nodeIOBase[] = [];\r\n\t\r\n\tconstructor(uid: string) {\r\n\t\tthis.uid = uid;\r\n        nodeBase.description = \"\";\r\n\t}\r\n\t\r\n\tcreateInput(name: string, type: string, description: string) {\r\n        let input = new nodeIOBase(name, type, description);\r\n\t\tthis.inputs.push(input);\r\n        return input;\r\n\t}\r\n\t\r\n\tcreateOutput(name: string, type: string, description: string) {\r\n        let output = new nodeIOBase(name, type, description);\r\n\t    this.outputs.push(output);\r\n        return output;\r\n\t}\r\n}\r\n\r\n"],"sourceRoot":"/source/"}