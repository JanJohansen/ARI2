{"version":3,"sources":["loggingService.ts"],"names":[],"mappings":"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","file":"loggingService.js","sourcesContent":["//import colors from 'colors';\r\n//import { EventEmitter } from 'events';\r\n\r\n//console.log(\"colors:\", colors);\r\n\r\n /*\r\n * loggingService\r\n */\r\nexport class loggingService {\r\n    static loggers: loggerInstance[] = [];\r\n    static logWriters: logWriterBase[] = [];\r\n    static listeners: Object = {};\r\n    static defaultLevel = \"info\";\r\n\r\n    static getLogger(name: string, level?: string): loggerInstance {\r\n        if(!this.loggers[name]){\r\n            if(!level) level = loggingService.defaultLevel;\r\n            let logger = new loggerInstance(name, level);\r\n            this.loggers[name] = logger; \r\n            return logger;\r\n        } else return this.loggers[name];\r\n    }\r\n\r\n    static logInput(logger: loggerInstance, level: number,  ...args){\r\n        // Filter on loggerInstance level...\r\n        if(level >= logger.level) {\r\n            this.logWriters.forEach(writer => {\r\n                writer.handleLogInput(logger, loggingService.levelToString(level), ...args);\r\n            });\r\n            if(loggingService.listeners[logger.name]){\r\n                loggingService.listeners[logger.name].forEach(callback => {\r\n                    callback(logger, loggingService.levelToString(level), ...args);\r\n                });\r\n            }\r\n            //console.log(loggingService.levelToString(level), \"\\t\", logger.name, \"\\t\", ...args);\r\n        }\r\n    }\r\n\r\n    static levelToString(level: number){\r\n        if(level <= loggingService.levels.trace) return \"trace\";\r\n        else if(level <= loggingService.levels.debug) return \"debug\";\r\n        else if(level <= loggingService.levels.info) return \"info\";\r\n        else if(level <= loggingService.levels.warn) return \"warn\";\r\n        else if(level <= loggingService.levels.error) return \"error\";\r\n        else if(level <= loggingService.levels.fatal) return \"fatal\";  \r\n    }\r\n\r\n    static levels = {\r\n        trace: 100,\r\n        debug: 200,\r\n        info: 300, \r\n        warn: 400,\r\n        error: 500,\r\n        fatal: 600\r\n    };\r\n\r\n    static addWriter(logWriter: logWriterBase){\r\n        this.logWriters.push(logWriter);\r\n    }\r\n\r\n    static on(loggerName: string, callback: (logger: loggerInstance, level: string, ...args: any[]) => void) {\r\n        if(!loggingService.listeners[loggerName]) loggingService.listeners[loggerName] = [];\r\n        loggingService.listeners[loggerName].push(callback);\r\n    }\r\n\r\n    static setLevel(loggerName: string, level: string) {\r\n        let logger = this.getLogger(loggerName, level);\r\n        logger.setLevel(level);\r\n    }\r\n\r\n    static setDefaultLevel(level: string) {\r\n        loggingService.defaultLevel = level;\r\n    }\r\n}\r\n\r\nclass loggerInstance {\r\n    name: string;\r\n    level: number;\r\n    constructor(name: string, level?: string) {\r\n        this.name = name;\r\n        if(level) this.setLevel(level);\r\n        else this.setLevel(loggingService.defaultLevel);\r\n    }\r\n\r\n    setLevel(level: string) {\r\n        if(loggingService.levels[level]) this.level = loggingService.levels[level];\r\n        // else ignore!?\r\n    }\r\n    \r\n    trace(...args) {\r\n        loggingService.logInput(this, loggingService.levels.trace, ...args);\r\n    }\r\n    debug(...args) {\r\n        loggingService.logInput(this, loggingService.levels.debug, ...args);\r\n    }\r\n    info(...args) {\r\n        loggingService.logInput(this, loggingService.levels.info, ...args);\r\n    }\r\n    warn(...args) {\r\n        loggingService.logInput(this, loggingService.levels.warn, ...args);\r\n    }\r\n    error(...args) {\r\n        loggingService.logInput(this, loggingService.levels.error, ...args);\r\n    }\r\n    fatal(...args) {\r\n        loggingService.logInput(this, loggingService.levels.fatal, ...args);\r\n    }\r\n}\r\n\r\nexport class logWriterBase {\r\n    constructor(configuration: Object = {}){}\r\n    handleLogInput(logger: loggerInstance, level: string, ...args){\r\n        console.log(\"Missing overrride of logWriters handleLogInput method.!\");\r\n    }\r\n}\r\n\r\nexport class consoleLogWriter extends logWriterBase {\r\n    writeTimeStamp: boolean = false;\r\n    \r\n    constructor(configuration: Object | any){\r\n        super();\r\n        this.writeTimeStamp = configuration.timestamp || true;\r\n    }\r\n\r\n    handleLogInput(logger, level: string, ...args){\r\n        if(this.writeTimeStamp) console.log(new Date(Date.now()).toISOString(), \"\\t\", level, \"\\t\", logger.name, \"\\t\", ...args);\r\n        else console.log(level, \"\\t\", logger.name, \"\\t\\t\", ...args);\r\n    }\r\n}"],"sourceRoot":"/source/"}